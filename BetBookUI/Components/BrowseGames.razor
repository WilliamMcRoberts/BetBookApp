@using BetBookUI.Helpers
@inject NavigationManager navManager
@using BetBookUI.Components
@inject AuthenticationStateProvider authProvider
@inject IUserData userData
@inject ITeamData teamData
@inject IGameData gameData
@inject ITeamRecordData recordData

@******************************  Demo Display  ********************************@

<div class="games">
    <div class="week-title">
        <h1 style="margin-left: 8em;" class="title">@gamesAvailable.Count Available Games</h1>
        <h1 style="margin-right: 8em;" class="title">@currentSeason Season Week @currentWeek</h1>
    </div>
    @if(basicGamesAvailable is not null)
    {
        int index = 0;
        foreach(BasicGameModel bg in basicGamesAvailable)
        {
            <div class="game-container">
                <div class="away-team">
                    <label class="local">Away</label>
                    <p style="margin-top: .5em;">@bg.AwayTeamName</p>
                    <div class="basic-record">
                        <p>@teamRecords[index].Wins.Split('|').SkipLast(1).ToArray().Length<span class="dash">-</span></p>
                        <p>@teamRecords[index].Losses.Split('|').SkipLast(1).ToArray().Length<span class="dash">-</span></p>
                        <p>@teamRecords[index].Draws.Split('|').SkipLast(1).ToArray().Length</p>
                    </div>
                </div>
                <div class="game-details">
                    <ul class="game-info">
                        <li class="team-item">@bg.AwayTeamName at @bg.HomeTeamName || @bg.FavoriteTeamName - @bg.PointSpread points</li>
                    </ul>
                    <button @onclick="(() => CreateBet(bg.GameId))" 
                        style="margin-bottom: 2em;" 
                        class="site-btn btn site-btn-light btn-sm text-uppercase">
                        Place A Wager On This Game
                    </button>
                </div>
                <div class="home-team">
                    <label class="local">Home</label>
                    <p style="margin-top: .5em;">@bg.HomeTeamName</p>
                    <div class="basic-record">
                        <p>@teamRecords[index + 1].Wins.Split('|').SkipLast(1).ToArray().Length<span class="dash">-</span></p>
                        <p>@teamRecords[index + 1].Losses.Split('|').SkipLast(1).ToArray().Length<span class="dash">-</span></p>
                        <p>@teamRecords[index + 1].Draws.Split('|').SkipLast(1).ToArray().Length</p>
                    </div>
                </div>
            </div>
            index += 2;
        }
    }
    else
    {
        <h1 class="title">There are no games currently available.</h1>
    }
</div>

@code {

    // Current logged in user
    public UserModel loggedInUser;

    // List of basic game models for displaying game info for the current week
    public List<BasicGameModel> basicGamesAvailable = new();

    // Array of team record models for available games
    public TeamRecordModel[] teamRecords = new TeamRecordModel[32];

    // Current week of season
    public int currentWeek;

    // Current season type
    public SeasonType currentSeason;

    // List of available games
    private List<GameModel> gamesAvailable = new();

    /// <summary>
    /// Async initialization method
    /// </summary>
    /// <returns></returns>
    protected async override Task OnInitializedAsync()
    {
        loggedInUser = await authProvider.GetUserFromAuth(userData);

        await authProvider.LoadAndVerifyUser(loggedInUser, userData);

        gamesAvailable = 
            (List<GameModel>) await gameData.GetAllNotStartedGames();

        basicGamesAvailable = 
            await gamesAvailable.PopulateBasicGameModelListFromGameList(
                gameData, teamData);

        teamRecords = 
            await basicGamesAvailable.PopulateTeamRecordsArrayFromBasicGameList(
                gameData, teamData, recordData);

        currentSeason = CalculationHelpers.CalculateSeason(DateTime.Now);

        currentWeek = CalculationHelpers.CalculateWeek(DateTime.Now, currentSeason);

    }

    /// <summary>
    /// Selects a game to place a wager on and navigates to
    /// the create bet page
    /// </summary>
    /// <param name="gameId">
    /// int represents the id of game being selected
    /// </param>
    private void CreateBet(int gameId)
    {
        if(loggedInUser is not null)
            navManager.NavigateTo($"/CreateBet/{gameId}");
        else
            navManager.NavigateTo("/MicrosoftIdentity/Account/SignIn", true);
    }

}
