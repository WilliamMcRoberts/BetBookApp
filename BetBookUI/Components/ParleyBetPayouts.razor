@inject IHouseAccountData houseData
@inject IBetData betData
@inject IUserData userData
@inject IGameData gameData
@inject ITeamData teamData
@inject IParleyBetData parleyData
@inject IConfiguration config
@inject AuthenticationStateProvider authProvider

<div>
    <div class="label-container">
        <h3 style="font-weight: 700">Parley Bets</h3>
    </div>
    <div class="item">
    <p>Pending Payout: $@TotalPendingParleyPayout</p>
    </div>
    <div class="item">
        <p>Pending Refund: $@TotalPendingParleyRefund</p>
    </div>
    <div style="text-align: center;margin-bottom: 1em;margin-top: 1em;">
        <button class="site-btn btn site-btn-light btn-sm text-uppercase" @onclick="PayoutUnpaidWinningParleyBets">Collect My Winnings</button>
    </div>
    <div style="text-align: center;margin-bottom: 1em;">
        <button class="site-btn btn site-btn-light btn-sm text-uppercase" @onclick="PayoutUnpaidPushParleyBets">Refund My Push Bets</button>
    </div>
</div>

@code {

    // Current logged in user
    private UserModel? loggedInUser;

    // House account
    private HouseAccountModel? houseAccount;

    // Total pending payout from all winning parley bets made by user
    [Parameter]
    public decimal TotalPendingParleyPayout { get; set; }

    // Total pending refund from all push parley bets made by user
    [Parameter]
    public decimal TotalPendingParleyRefund { get; set; }

    // List of winning parley bets made by user
    [Parameter]
    public List<ParleyBetModel> WinningParleyBetsUnpaid { get; set; } = new();

    // List of push parley bets made by user 
    [Parameter]
    public List<ParleyBetModel> PushParleyBetsUnpaid { get; set; } = new();

    /// <summary>
    /// Async initialization method
    /// </summary>
    /// <returns></returns>
    protected async override Task OnInitializedAsync()
    {
        loggedInUser = await authProvider.GetUserFromAuth(userData);

        houseAccount = await houseData.GetHouseAccount();

        loggedInUser.AccountBalance = 
            Convert.ToDecimal((loggedInUser.AccountBalance).ToString("#.00"));
    }

    /// <summary>
    /// Method pays out all unpaid winning parley bets
    /// </summary>
    /// <returns></returns>
    private async Task PayoutUnpaidWinningParleyBets()
    {
        if(loggedInUser is not null && houseAccount is not null)
        {
            await loggedInUser.PayoutParleyBetsTransaction(
                WinningParleyBetsUnpaid, houseAccount, TotalPendingParleyPayout, config, 
                    userData, houseData, parleyData);

            loggedInUser = await authProvider.GetUserFromAuth(userData);

            WinningParleyBetsUnpaid.Clear();

            TotalPendingParleyPayout = 
                WinningParleyBetsUnpaid.CalculateTotalPendingParleyPayout();
        }
    }

    /// <summary>
    /// Method pays out all unpaid push parley bets
    /// </summary>
    /// <returns></returns>
    private async Task PayoutUnpaidPushParleyBets()
    {
        if(loggedInUser is not null && houseAccount is not null)
        {
            await loggedInUser.PayoutParleyBetsTransaction(
                PushParleyBetsUnpaid, houseAccount, TotalPendingParleyRefund, config, 
                    userData, houseData, parleyData);

            loggedInUser = await authProvider.GetUserFromAuth(userData);

            PushParleyBetsUnpaid.Clear();

            TotalPendingParleyRefund = 
                PushParleyBetsUnpaid.CalculateTotalPendingParleyPayout();
        }
    }
}
