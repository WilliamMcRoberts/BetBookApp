
@inject IUserData userData
@inject IConfiguration config
@inject IHouseAccountData houseData
@inject IBetData betData
@inject IGameData gameData
@inject ITeamData teamData
@inject AuthenticationStateProvider authProvider

<div>
    <div class="label-container">
        <h3 style="font-weight: 700">@loggedInUser?.DisplayName's Single Bets</h3>
    </div>
    <div class="item">
    <p>Pending Payout: $@TotalPendingPayout</p>
    </div>
    <div class="item">
        <p>Pending Refund: $@TotalPendingRefund</p>
    </div>
    <div style="text-align: center;margin-bottom: 1em;margin-top: 1em;">
        <button class="site-btn btn site-btn-light btn-sm text-uppercase" @onclick="PayoutUnpaidWinningBets">Collect My Winnings</button>
    </div>
    <div style="text-align: center;margin-bottom: 1em;">
        <button class="site-btn btn site-btn-light btn-sm text-uppercase" @onclick="RefundUnpaidPushBets">Refund My Push Bets</button>
    </div>
</div>

@code {

    // Total pending payout from winning bets unpaid
    [Parameter]
    public decimal TotalPendingPayout { get; set; }

    // Total pending refund from push bets unpaid
    [Parameter]
    public decimal TotalPendingRefund { get; set; }

    // Current logged in user
    private UserModel? loggedInUser;

    // List of winning bets unpaid
    [Parameter]
    public List<BetModel> BettorWinningBetsUnpaid { get; set; } = new();

    // List of push bets unpaid
    [Parameter]
    public List<BetModel> BettorPushBetsUnpaid { get; set; } = new();

    // House account
    private HouseAccountModel? houseAccount;

    /// <summary>
    /// Async initialization method
    /// </summary>
    /// <returns></returns>
    protected async override Task OnInitializedAsync()
    {
        loggedInUser = await authProvider.GetUserFromAuth(userData);
        loggedInUser.AccountBalance =  
            Convert.ToDecimal((loggedInUser.AccountBalance).ToString("#.00"));
        houseAccount = await houseData.GetHouseAccount();
    }

    /// <summary>
    /// Async method pays the user all unpaid 
    /// payouts
    /// </summary>
    /// <returns></returns>
    private async Task PayoutUnpaidWinningBets()
    {
        if(houseAccount is not null && loggedInUser is not null)
        {
            // Transaction method updates bet statuses, transfers
            // funds from house account to user account
            await loggedInUser.PayoutBetsTransaction(
                BettorWinningBetsUnpaid, houseAccount, TotalPendingPayout, config, userData, 
                    houseData, betData);

            loggedInUser = await authProvider.GetUserFromAuth(userData);

            BettorWinningBetsUnpaid.Clear();

            TotalPendingPayout = 
                BettorWinningBetsUnpaid.CalculateTotalPendingPayout();
        }
    }

    /// <summary>
    /// Async method refunds all unpaid push bets
    /// </summary>
    /// <returns></returns>
    private async Task RefundUnpaidPushBets()
    {
        if(houseAccount is not null && loggedInUser is not null)
        {
            // Transaction method updates bet statuses, transfers
            // funds from house account to user account
            await loggedInUser.PayoutBetsTransaction(
                BettorPushBetsUnpaid, houseAccount, TotalPendingRefund, config, userData, 
                    houseData, betData);

            loggedInUser = await authProvider.GetUserFromAuth(userData);

            BettorPushBetsUnpaid.Clear();

            TotalPendingRefund = 
                BettorPushBetsUnpaid.CalculateTotalPendingRefund();
        }
    }
}