@inject ITeamData teamData
@inject IGameData gameData
@inject ITeamRecordData recordData
@inject IBetData betData
@inject IParleyBetData parleyData

<div class="input">
    <div class="winner-input">
            <h1 style="margin-top: .5em;" class="title">Update Scores</h1>
        <div class="game">
            @if (scoresAdded)
            {
                <div style="margin: 4em 1em;">
                    <h1>Winners have been successfully added!</h1>
                    <h1>You may add more game winners.</h1>
                </div>
            }
            else
            {
                <ul class="game-info">
                    <li class="team-item">Home Team || @basicGame.HomeTeamName</li>
                    <li class="team-item">Away Team || @basicGame.AwayTeamName</li>
                    <li class="team-item">Favorite || @basicGame.FavoriteTeamName</li>
                    <li class="team-item">Underdog || @basicGame.UnderdogTeamName</li>
                    <li class="team-item">Point Spread || @basicGame.PointSpread</li>
                </ul>
            }
            <br>
        </div>
        @if(statusBad == true)
        {
            <div style="color:red;text-align:center;margin-bottom:1em;font-size:15px;font-weight:700;margin-right:2em;">
                *YOU CANNOT ADD SCORES TO A GAME WITH A FINISHED STATUS*
            </div>
        }
        else if(noGame == true)
        {
            <div style="color:red;text-align:center;margin-bottom:1em;font-size:15px;font-weight:700;margin-right:2em;">
                *THERE IS NO GAME WITH THAT GAME ID, TRY AGAIN*
            </div>
        }
        else
        {
            <div style="text-align:center;margin-bottom:1em;font-size:15px;font-weight:700;">
                ENTER A GAME ID TO SELECT A GAME
            </div>
        }
        <div class="game-id-box">
            <div style="display: flex;justify-content: space-between;">
                <div class="scores-box">
                    <label>Game Id</label>
                    <input type="number" 
                        @bind-value="@gameId" 
                        @bind-value:event="oninput"/>
                </div>
                <div>
                    <button type="button" class="mt-1 site-btn btn site-btn-light btn-sm text-uppercase" 
                        @onclick="(() =>  PopulateBasicGame(gameId))">
                        Get Game
                    </button>
                </div>
            </div>
            <div style="margin-top: 2em;margin-bottom:2em;display: flex;justify-content: space-between;">
                <div class="scores-box">
                <label>Favorite Score</label>
                <input type="number" 
                    @bind-value="@favoriteTeamScore" 
                    @bind-value:event="oninput"/>
                </div>
                <div style="margin: 0 2em;">
                    <button @onclick="UpdateScoresBetsRecords" class="mt-1 site-btn btn site-btn-light btn-sm text-uppercase">
                        Submit Scores
                    </button>
                </div>
                <div class="scores-box">
                    <label>Underdog Score</label>
                    <input type="number" 
                        @bind-value="@underdogTeamScore" 
                        @bind-value:event="oninput"/>
                </div>
            </div>
        </div>
    </div>
</div>

@code {

    // Basic game of selected game
    private BasicGameModel basicGame  = new();

    // Current game being updated
    private GameModel? currentGame  = new();

    // Boolean to check if winners were added
    private bool scoresAdded = false;

    // Boolean to check if current game is null
    private bool noGame = false;

    // Boolean to check if game status is finished
    private bool statusBad = false;

    private int gameId;

    private int underdogTeamScore;
    private int favoriteTeamScore;


    /// <summary>
    /// Async method calls AddScores(), UpdateBetWinners(), 
    /// and UpdateTeamRecords() methods
    /// </summary>
    /// <returns></returns>
    private async Task UpdateScoresBetsRecords()
    {
        if (currentGame is not null)
        {
            statusBad = await currentGame.UpdateScores(
                favoriteTeamScore, underdogTeamScore, teamData, gameData);

            if(statusBad == false)
            {
                await currentGame.UpdateBetWinners(
                favoriteTeamScore, underdogTeamScore, betData, teamData);

                await currentGame.UpdateTeamRecords(
                    favoriteTeamScore, underdogTeamScore, teamData, recordData);

                scoresAdded = true;
                underdogTeamScore = 0;
                favoriteTeamScore = 0;
            }
        }

        else
            noGame = true;

        await UpdateHelpers.UpdateParleyBetWinners(parleyData);
    }

    /// <summary>
    /// Async method calls the PopulateBasicGameModelFromGameId() 
    /// population helper method
    /// </summary>
    /// <param name="gameId">
    /// int represents the game id of the game being used to populate basic game 
    /// </param>
    /// <returns></returns>
    private async Task PopulateBasicGame(int gameId)
    {
        statusBad = false;
        noGame = false;
        scoresAdded = false;

        currentGame = await gameData.GetGame(gameId);

        if (currentGame is not null)
        {
            

            basicGame = 
                await currentGame.PopulateBasicGameModelFromGame(teamData);
        }

        else
            noGame = true; 
    }
}
