@inject IHouseAccountData houseData
@inject IBetData betData
@inject IUserData userData
@inject IGameData gameData
@inject ITeamData teamData
@inject IParleyBetData parleyData
@inject IConfiguration config
@inject AuthenticationStateProvider authProvider

<div class="user-profile-parley">
    <ParleyBetPayouts TotalPendingParleyPayout="totalPendingParleyPayout" 
                      TotalPendingParleyRefund="totalPendingParleyRefund" 
                      WinningParleyBetsUnpaid="bettorWinningParleyBetsUnpaid" 
                      PushParleyBetsUnpaid="bettorPushParleyBetsUnpaid"/>

    <div class="divider"></div>
    
    <ParleyBetLists ParleyBasicBetList="bettorInProgressBasicParleyBets"
                    ParleyBetType="Open"/>
    <ParleyBetLists ParleyBasicBetList="bettorWinningBetsUnpaidBasicParleyBets"
                    ParleyBetType="Winning Unpaid"/>
    <ParleyBetLists ParleyBasicBetList="bettorPushBetsUnpaidBasicParleyBets"
                    ParleyBetType="Unpaid Push"/>
</div>

@code {

    // Current logged in user
    private UserModel? loggedInUser;

    private HouseAccountModel? houseAccount;

    private List<ParleyBetModel> bettorWinningParleyBetsUnpaid = new();

    private List<ParleyBetModel> bettorPushParleyBetsUnpaid = new();

    // List of all bettor bets with bet status of "IN_PROGRESS"
    private List<ParleyBetModel> bettorInProgressParleyBets = new();

    private List<ParleyBasicBetModel> bettorInProgressBasicParleyBets = new();

    private List<ParleyBasicBetModel> bettorWinningBetsUnpaidBasicParleyBets = new();

    private List<ParleyBasicBetModel> bettorPushBetsUnpaidBasicParleyBets = new();

    IEnumerable<ParleyBetModel>? allParleyBets;

    private decimal totalPendingParleyPayout;

    private decimal totalPendingParleyRefund;
    /// <summary>
    /// Async initialization method
    /// </summary>
    /// <returns></returns>
    protected async override Task OnInitializedAsync()
    {
        loggedInUser = await authProvider.GetUserFromAuth(userData);

        houseAccount = await houseData.GetHouseAccount();

        loggedInUser.AccountBalance = 
            Convert.ToDecimal((loggedInUser.AccountBalance).ToString("#.00"));

        allParleyBets = await parleyData.GetParleyBets();

        await FilterParleyBetsAndPopulateLists();

        // Total payout of all unpaid winning parley bets
        totalPendingParleyPayout = 
            bettorWinningParleyBetsUnpaid.CalculateTotalPendingParleyPayout();

        // Total retfund of all unpaid parley push bets
        totalPendingParleyRefund = 
            bettorPushParleyBetsUnpaid.CalculateTotalPendingParleyRefund();
    }

    private async Task FilterParleyBetsAndPopulateLists()
    {
        if(loggedInUser is not null && allParleyBets is not null)
        {
            bettorWinningParleyBetsUnpaid = allParleyBets.Where(b => 
            b.BettorId == loggedInUser.Id && 
            b.ParleyBetStatus == ParleyBetStatus.WINNER && 
            b.ParleyPayoutStatus == ParleyPayoutStatus.UNPAID).ToList();

            bettorPushParleyBetsUnpaid = allParleyBets.Where(b => 
                b.BettorId == loggedInUser.Id && 
                b.ParleyBetStatus == ParleyBetStatus.PUSH && 
                b.ParleyPayoutStatus == ParleyPayoutStatus.UNPAID).ToList();

            bettorInProgressParleyBets = allParleyBets.Where(b =>
                b.BettorId == loggedInUser.Id &&
                b.ParleyBetStatus == ParleyBetStatus.IN_PROGRESS).ToList();

            bettorInProgressBasicParleyBets = 
            await bettorInProgressParleyBets.PopulateParleyBasicBetListFromParleyBetsList(
                gameData, teamData, betData);

            bettorWinningBetsUnpaidBasicParleyBets = 
                await bettorWinningParleyBetsUnpaid.PopulateParleyBasicBetListFromParleyBetsList(
                    gameData, teamData, betData);

            bettorPushBetsUnpaidBasicParleyBets = 
                await bettorPushParleyBetsUnpaid.PopulateParleyBasicBetListFromParleyBetsList(
                    gameData, teamData, betData);
        }
    }
}
