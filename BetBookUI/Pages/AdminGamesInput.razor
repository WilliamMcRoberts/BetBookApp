@page "/AdminGamesInput"
@attribute [Authorize(Policy = "Admin")]
@using Syncfusion.Blazor.Calendars
@inject ITeamData teamData
@inject IGameData gameData
@inject ITeamRecordData recordData

<PageTitle>AdminGamesInput</PageTitle>

@************************** Demo Display *********************************@

<div class="input">
    <div class="game-input">
        <div class="input-label-container">
            <h1 class="input-label">Game Input</h1>
            <div>
                @if(gameFormGood == false)
                {
                    <div style="color:red;text-align:center;margin-top:1em;font-size:15px;font-weight:700;margin-right:2em;">*YOU MUST FILL OUT ALL OF THE INFO*</div>
                }
                else
                {
                    <div style="text-align:center;margin-top:1em;font-size:15px;font-weight:700;margin-right:2em;">FILL OUT THE FORM TO CREATE A GAME</div>
                }
            </div>
        </div>
        <div class="input-box">
            <label>Game Stadium</label>
            <SfTextBox  Input="@((args) => gameStadium = args.Value)" @bind-Value="@gameStadium" ></SfTextBox>  
        </div>
        <div class="input-box">
            <label>Date Of Game</label>
            <SfDateTimePicker TValue="DateTime?"> 
                <DateTimePickerEvents TValue="DateTime?" ValueChange="DateChangeHandler"></DateTimePickerEvents>
            </SfDateTimePicker>
        </div>
        <div class="input-box">
            <label>Home Team Id</label>
            <input type="number" @bind-value="@homeTeamId" @bind-value:event="oninput"/>
        </div>
        <div class="input-box">
            <label>Away Team Id</label>
            <input type="number" @bind-value="@awayTeamId" @bind-value:event="oninput"/>
        </div>
        <div>
             <button style="float:right;margin-right:6em;" class="mb-2 mt-2 site-btn btn site-btn-light btn-sm text-uppercase" @onclick="InsertGame">Insert Game</button>
        </div>
        <div class="input-box">
            <label>Favorite Id</label>
            <input type="number" @bind-value="@favoriteId" @bind-value:event="oninput"/>
        </div>
        <div class="input-box">
            <label>Underdog Id</label>
            <input type="number" @bind-value="@underdogId" @bind-value:event="oninput"/>
        </div>
        <div class="input-box">
            <label>Point Spread</label>
            <input type="number" @bind-value="@pointSpread" @bind-value:event="oninput"/>
        </div>
        <div style="margin-bottom: 1em;" class="input-box">
            <label>Week Number</label>
            <input type="number" @bind-value="@weekNumber" @bind-value:event="oninput"/>
        </div>
    </div>
</div>

@code {

    // Boolean to check game input form is complete
    private bool gameFormGood = true;

    // Id of home team
    private int homeTeamId;

    // Id of away team
    private int awayTeamId;

    // Id of favorite
    private int favoriteId;

    // Id of underdog
    private int underdogId;

    // Point spread of game
    private double pointSpread;

    // Week number of game
    private int weekNumber;

    // Stadium of game
    private string gameStadium;

    // Date of game
    public DateTime? dateOfGame = new DateTime();

    // Preseason start date
    private DateTime preSeasonStartDate = new DateTime(2022, 8, 4);

    // Regular season start date
    private DateTime regularSeasonStartDate = new DateTime(2022, 9, 8);

    // Post-season start date
    private DateTime postSeasonStartDate = new DateTime(2023, 1, 14);

    // Super bowl day
    private DateTime superBowlDay = new DateTime(2023, 2, 5);

    /// <summary>
    ///     Async method for admin to insert a game into 
    ///     the database
    /// </summary>
    /// <returns></returns>
    private async Task InsertGame()
    {
        if (ValidateGameForm() == true)
        {
            GameModel GameToAdd = new();

            GameToAdd.HomeTeamId = homeTeamId;
            GameToAdd.AwayTeamId = awayTeamId;
            GameToAdd.FavoriteId = favoriteId;
            GameToAdd.UnderdogId = underdogId;
            GameToAdd.PointSpread = pointSpread;
            GameToAdd.Week = weekNumber;
            GameToAdd.Stadium = gameStadium;
            GameToAdd.DateOfGame = dateOfGame;

            if (dateOfGame > preSeasonStartDate && dateOfGame < regularSeasonStartDate)
                GameToAdd.Season = SeasonType.PRE;
            else if (dateOfGame > regularSeasonStartDate && dateOfGame < postSeasonStartDate)
                GameToAdd.Season = SeasonType.REG;
            else if (dateOfGame > postSeasonStartDate && dateOfGame < superBowlDay)
                GameToAdd.Season = SeasonType.POST;
            GameToAdd.GameStatus = GameStatus.NOT_STARTED;

            await gameData.InsertGame(GameToAdd);

            ClearGameForm();
        }

        else
        {
            gameFormGood = false;
            return;
        }
    }

    /// <summary>
    ///     Validation for game input
    /// </summary>
    /// <returns>
    ///     bool representing validity of the game form
    /// </returns>
    private bool ValidateGameForm()
    {
        if (homeTeamId == 0 || awayTeamId == 0 || favoriteId == 0 || 
            underdogId == 0 || weekNumber == 0 || dateOfGame is null)
            return false;
        else
            return true;
    }

    /// <summary>
    ///     Method clears game form after submit
    /// </summary>
    private void ClearGameForm()
    {
        homeTeamId = 0;
        awayTeamId = 0;
        favoriteId = 0;
        underdogId = 0;
        pointSpread = 0;
        dateOfGame = DateTime.Now;
        weekNumber = 0;
        gameStadium = "";
    }

    /// <summary>
    ///     Method for value change for date of game
    /// </summary>
    /// <param name="args">
    ///     DateTime representing date of game
    /// </param>
    private void DateChangeHandler(ChangedEventArgs<DateTime?> args)
    {
        dateOfGame = args.Value;
        StateHasChanged();
    }

}
