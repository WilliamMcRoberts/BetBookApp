@page "/CreateBet/{gameId:int}"
@attribute [Authorize]
@using BetBookUI.Helpers
@using Syncfusion.Blazor.Inputs
@using BetBookUI.Components
@inject AuthenticationStateProvider authProvider
@inject IUserData userData
@inject IGameData gameData
@inject ITeamData teamData
@inject IHouseAccountData houseData
@inject ITeamRecordData recordData

<PageTitle>CreateBet</PageTitle>

<div class="game-wager-container">

    <GameDetails BasicCurrentGame="basicCurrentGame" 
                 TeamStats="teamStats" 
                 GameTeamRecordsLists="gameTeamRecordsLists"/>

    <CreateWager BetAmount="betAmount" 
                 CurrentGame="currentGame"
                 BasicCurrentGame="basicCurrentGame" 
                 TeamToWin="teamToWin" 
                 GameId="gameId" 
                 HouseAccount="houseAccount"
                 LoggedInUser="loggedInUser"/>
</div>

@code {

    // Game id from selected game
    [Parameter]
    public int gameId { get; set; }

    // Current game being viewed
    private GameModel currentGame;

    // Display info for current game being viewed
    private BasicGameModel basicCurrentGame = new();

    // List of a list of team records in current game
    private List<List<string>> gameTeamRecordsLists = new();

    // Stats of the teams in the game
    int[] teamStats = new int[6];

    // Current logged in user
    private UserModel loggedInUser;

    // Amount to bet
    public decimal betAmount;

    // Chosen winner of game
    private TeamModel? teamToWin;

    // Account balance of the house
    private HouseAccountModel houseAccount;

    /// <summary>
    /// Async initialization method
    /// </summary>
    /// <returns></returns>
    protected async override Task OnInitializedAsync()
    {
        loggedInUser = await authProvider.GetUserFromAuth(userData);

        houseAccount = await houseData.GetHouseAccount();

        currentGame = await gameData.GetGame(gameId);

        if(currentGame is not null)
        {
            basicCurrentGame = await PopulationHelpers.PopulateBasicGameModelFromGame(
                currentGame, teamData);
            gameTeamRecordsLists =  await PopulationHelpers.PopulateRecordsListsFromGame(
                currentGame, recordData);
        }

        if(gameTeamRecordsLists is not null)
        {
            teamStats = PopulationHelpers.PopulateTeamStatsFromRecordLists(
            gameTeamRecordsLists);
        }
    }
}
