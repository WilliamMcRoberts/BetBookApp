@page "/CreateBet/{gameId:int}"
@attribute [Authorize]
@inject AuthenticationStateProvider authProvider
@inject IGameData gameData
@inject ITeamData teamData
@inject ITeamRecordData recordData
@inject IUserData userData

<PageTitle>CreateBet</PageTitle>

<div style="margin-left: 4em;" class="balance">
    <label>Your Balance: $@loggedInUser?.AccountBalance</label>
</div>
<div class="game-wager-container">

    <GameDetails BasicCurrentGame="basicCurrentGame" 
                 TeamStats="teamStats" 
                 GameTeamRecordsLists="gameTeamRecordsLists"/>

    <CreateWager CurrentGame="currentGame"
                 BasicCurrentGame="basicCurrentGame"/>
</div>

@code {

    // Game id from selected game
    [Parameter]
    public int gameId { get; set; }

    // Current game being viewed
    private GameModel? currentGame;

    // Display info for current game being viewed
    private BasicGameModel basicCurrentGame = new();

    // List of a list of team records in current game
    private List<List<string>> gameTeamRecordsLists = new();

    // Stats of the teams in the game
    int[] teamStats = new int[6];

    // Current logged in user
    private UserModel? loggedInUser;

    // Account balance of current logged in user
    private decimal userAccountBalance;

    /// <summary>
    /// Async initialization method
    /// </summary>
    /// <returns></returns>
    protected async override Task OnInitializedAsync()
    {
        currentGame = await gameData.GetGame(gameId);

        loggedInUser = await authProvider.GetUserFromAuth(userData);

        userAccountBalance = 
            Convert.ToDecimal((loggedInUser.AccountBalance).ToString("#.00"));
        

        if(currentGame is not null)
        {
            basicCurrentGame = 
                await currentGame.PopulateBasicGameModelFromGame(teamData);
            gameTeamRecordsLists =  
                await currentGame.PopulateRecordsListsFromGame(recordData);
        }

        if(gameTeamRecordsLists is not null)
            teamStats = gameTeamRecordsLists.PopulateTeamStatsFromRecordLists();
    }
}
