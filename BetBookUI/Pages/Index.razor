@page "/"
@using BetBookUI.Helpers
@inject AuthenticationStateProvider authProvider
@inject NavigationManager navManager
@inject IUserData userData
@inject ITeamData teamData
@inject IGameData gameData
@inject ITeamRecordData recordData

<PageTitle>Index</PageTitle>

@******************************  Demo Display  ********************************@

<div class="games">
    <div class="week-title">
        <h1 style="margin-left: 3em;" class="title">Available Games</h1>
        <h1 style="margin-right: 3em;" class="title">Week @currentWeek</h1>
    </div>
    @if(basicGamesAvailable is not null)
    {
        int index = 0;
        foreach(BasicGameModel bg in basicGamesAvailable)
        {
            <div class="game-container">
                <div class="away-team">
                    <label class="local">Away</label>
                    <p style="margin-top: .5em;">@bg.AwayTeamName</p>
                    <div class="basic-record">
                        <p>@teamRecords[index].Wins.Split('|').SkipLast(1).ToArray().Length<span class="dash">-</span></p>
                        <p>@teamRecords[index].Losses.Split('|').SkipLast(1).ToArray().Length<span class="dash">-</span></p>
                        <p>@teamRecords[index].Draws.Split('|').SkipLast(1).ToArray().Length</p>
                    </div>
                </div>
                <div class="game-details">
                    <ul class="game-info">
                        <li class="team-item">@bg.AwayTeamName at @bg.HomeTeamName || @bg.FavoriteTeamName - @bg.PointSpread points</li>
                    </ul>
                    <button @onclick="(() => CreateBet(bg.GameId))" 
                        style="margin-bottom: 2em;" 
                        class="site-btn btn site-btn-light btn-sm text-uppercase">
                        Place A Wager On This Game
                    </button>
                </div>
                <div class="home-team">
                    <label class="local">Home</label>
                    <p style="margin-top: .5em;">@bg.HomeTeamName</p>
                    <div class="basic-record">
                        <p>@teamRecords[index + 1].Wins.Split('|').SkipLast(1).ToArray().Length<span class="dash">-</span></p>
                        <p>@teamRecords[index + 1].Losses.Split('|').SkipLast(1).ToArray().Length<span class="dash">-</span></p>
                        <p>@teamRecords[index + 1].Draws.Split('|').SkipLast(1).ToArray().Length</p>
                    </div>
                </div>
            </div>
            index += 2;
        }
    }
    else
    {
        <h1 class="title">There are no games currently available.</h1>
    }
</div>

@code {

    // Current logged in user
    private UserModel loggedInUser;

    // List of basic game models for displaying game info for the current week
    private List<BasicGameModel> basicGamesAvailable = new();

    // List of available game models for the current week
    private List<GameModel> gamesAvailable = new();

    // Array of team record models for available games
    private TeamRecordModel[] teamRecords = new TeamRecordModel[32];

    // Current week of season
    private int currentWeek;

    // Preseason start date
    private DateTime preSeasonStartDate = new DateTime(2022, 8, 4);

    // Regular season start date
    private DateTime regularSeasonStartDate = new DateTime(2022, 9, 8);

    // Post-season start date
    private DateTime postSeasonStartDate = new DateTime(2023, 1, 14);

    // Super bowl day
    private DateTime superBowlDay = new DateTime(2023, 2, 5);

    // Current date
    DateTime currentDate = DateTime.Today;

    // New account balance
    decimal NEW_ACCOUNT_BALANCE = 10000;

    /// <summary>
    /// Async initialization method
    /// </summary>
    /// <returns></returns>
    protected async override Task OnInitializedAsync()
    {
        await LoadAndVerifyUser();

        gamesAvailable = 
            (List<GameModel>) await gameData.GetAllNotStartedGames();

        basicGamesAvailable = await PopulationHelpers.PopulateBasicGameModelListFromGameList(
            gamesAvailable, gameData, teamData);

        teamRecords = await PopulationHelpers.PopulateTeamRecordsArrayFromBasicGameList(
            basicGamesAvailable, gameData, teamData, recordData);

        currentWeek = GetCurrentWeek();
    }

    /// <summary>
    /// Async method that grabs logged in user's info from Azure AD B2C and checks if they have a sql User entry and if not calls the spUsers_Insert stored procedure
    /// If user has an entry it checks for any new info and if so calls the spUsers_Update stored procedure
    /// </summary>
    /// <returns></returns>
    private async Task LoadAndVerifyUser()
    {
        var authState = await authProvider.GetAuthenticationStateAsync();
        string objectIdentifier = authState.User.Claims.FirstOrDefault(c => c.Type.Contains("objectidentifier"))?.Value;

        if (string.IsNullOrWhiteSpace(objectIdentifier) == false)
        {
            loggedInUser = await userData.GetUserFromAuthentication(objectIdentifier) ?? new();

            string firstName = authState.User.Claims.FirstOrDefault(c => c.Type.Contains("givenname"))?.Value;
            string lastName = authState.User.Claims.FirstOrDefault(c => c.Type.Contains("surname"))?.Value;
            string displayName = authState.User.Claims.FirstOrDefault(c => c.Type.Equals("name"))?.Value;
            string emailAddress = authState.User.Claims.FirstOrDefault(c => c.Type.Contains("email"))?.Value;

            bool isDirty = false;

            if (objectIdentifier.Equals(loggedInUser.ObjectIdentifier) == false)
            {
                isDirty = true;
                loggedInUser.ObjectIdentifier = objectIdentifier;
            }
            if (firstName.Equals(loggedInUser.FirstName) == false)
            {
                isDirty = true;
                loggedInUser.FirstName = firstName;
            }

            if (lastName.Equals(loggedInUser.LastName) == false)
            {
                isDirty = true;
                loggedInUser.LastName = lastName;
            }

            if (displayName.Equals(loggedInUser.DisplayName) == false)
            {
                isDirty = true;
                loggedInUser.DisplayName = displayName;
            }

            if (emailAddress.Equals(loggedInUser.EmailAddress) == false)
            {
                isDirty = true;
                loggedInUser.EmailAddress = emailAddress;
            }

            if (isDirty)
            {
                if (loggedInUser.Id == 0)
                {
                    // New user recieves 10,000 in account
                    loggedInUser.AccountBalance = NEW_ACCOUNT_BALANCE;

                    await userData.InsertUser(loggedInUser);
                }

                else
                {
                    await userData.UpdateUser(loggedInUser);
                }
            }
        }
    }

    /// <summary>
    /// Method calculates and returns current week in current season 
    /// (PRE, REG, POST)
    /// </summary>
    /// <returns>
    /// int represents the current week
    /// </returns>
    private int GetCurrentWeek()
    {
        double weekInTicks = 604800;
        int currentWeek = 0;

        if(currentDate > preSeasonStartDate && currentDate < regularSeasonStartDate)
        {
            double currentWeekInTicks = ((currentDate - preSeasonStartDate).TotalDays / 7) * weekInTicks;
            currentWeek = (int)(currentWeekInTicks / weekInTicks);
            currentWeek += 1;
        }

        else if(currentDate > regularSeasonStartDate && currentDate < postSeasonStartDate)
        {
            double currentWeekInTicks = ((currentDate - regularSeasonStartDate).TotalDays / 7) * weekInTicks;
            currentWeek = (int)(currentWeekInTicks / weekInTicks);
            currentWeek += 1;
        }

        else if(currentDate > postSeasonStartDate && currentDate < superBowlDay)
        {
            double currentWeekInTicks = ((currentDate - postSeasonStartDate).TotalDays / 7) * weekInTicks;
            currentWeek = (int)(currentWeekInTicks / weekInTicks);
            currentWeek += 1;
        }

        return currentWeek;
    }

    /// <summary>
    /// Selects a game to place a wager on and navigates to
    /// the create bet page
    /// </summary>
    /// <param name="gameId">
    /// int represents the id of game being selected
    /// </param>
    private void CreateBet(int gameId)
    {
        if(loggedInUser is not null)
            navManager.NavigateTo($"/CreateBet/{gameId}");
        else
            navManager.NavigateTo("/MicrosoftIdentity/Account/SignIn", true);
    }

}
